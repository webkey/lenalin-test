@mixin clearfix() {
	&::after {
		content: '';
		display: table;
		clear: both;
	}
}

@mixin optional-at-root($sel) {
	@at-root #{if(not &, $sel, selector-append(&, $sel))} {
		@content;
	}
}

@mixin input-placeholder() {
	@include optional-at-root('::-webkit-input-placeholder') {
		@content;
	}

	@include optional-at-root(':-moz-placeholder') {
		@content;
	}

	@include optional-at-root('::-moz-placeholder') {
		opacity: 1;
		@content;
	}

	@include optional-at-root(':-ms-input-placeholder') {
		opacity: 1;
		@content;
	}

	@include optional-at-root('.placeholder') {
		@content;
	}
}

@mixin input-placeholder-focus {
	@include optional-at-root(":focus::-webkit-input-placeholder") {
		@content;
	}

	@include optional-at-root(":focus:-moz-placeholder") {
		@content;
	}

	@include optional-at-root(":focus::-moz-placeholder") {
		@content;
	}

	@include optional-at-root(":focus:-ms-input-placeholder") {
		@content;
	}

	@include optional-at-root(".placeholder:focus") {
		@content;
	}
}

@mixin input-placeholder-hover {
	@include optional-at-root(":hover::-webkit-input-placeholder") {
		@content;
	}

	@include optional-at-root(":hover:-moz-placeholder") {
		@content;
	}

	@include optional-at-root(":hover::-moz-placeholder") {
		@content;
	}

	@include optional-at-root(":hover:-ms-input-placeholder") {
		@content;
	}

	@include optional-at-root(".placeholder:hover") {
		@content;
	}
}

@mixin retina($pixel-ratio: 1.5, $min-resolution: 144dpi) {
	@media (-webkit-min-device-pixel-ratio: $pixel-ratio), (min-resolution: $min-resolution) {
		@content;
	}
}

@mixin below($width, $orientation: 'width') {
	@media screen and (max-#{$orientation}: $width - 1) {
		@content;
	}
}

@mixin above($width, $orientation: 'width') {
	@media screen and (min-#{$orientation}: $width) {
		@content;
	}
}

@mixin between($minWidth, $maxWidth, $orientation: 'width') {
	@media screen and (min-#{$orientation}: $minWidth) and (max-#{$orientation}: $maxWidth) {
		@content;
	}
}

@mixin sm {
	@media (min-width: #{$sm}) {
		@content;
	}
}

@mixin md {
	@media (min-width: #{$md}) {
		@content;
	}
}

@mixin lg {
	@media (min-width: #{$lg}) {
		@content;
	}
}

@mixin xl {
	@media (min-width: #{$xl}) {
		@content;
	}
}

@mixin truncate($truncation-boundary) {
	max-width: $truncation-boundary;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

@mixin fix-text-size-adjust() {
	background-image: linear-gradient(transparent, transparent);
}

@mixin margin-x($margin) {
	margin-left: $margin;
	margin-right: $margin;
}

@mixin margin-y($margin) {
	margin-top: $margin;
	margin-bottom: $margin;
}

@mixin padding-x($padding) {
	padding-left: $padding;
	padding-right: $padding;
}

@mixin padding-y($padding) {
	padding-top: $padding;
	padding-bottom: $padding;
}

// Generate font-face
// @example
// @include font-face("candara", "../fonts/candara/regular/candara", normal, normal, eot woff ttf svg)

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;
	$extmods: (eot: "?", svg: "#" + str-replace($name, " ", "_"));
	$formats: (otf: "opentype", ttf: "truetype");

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

// Leaner gradient
@function convert-angle($value, $unit) {
	$convertable-units: deg grad turn rad;
	$conversion-factors: 1 10grad / 9deg 1turn / 360deg 3.14159rad / 180deg;

	@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
		@return $value / nth($conversion-factors, index($convertable-units, unit($value))) * nth($conversion-factors, index($convertable-units, $unit));
	}

	@warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

@function is-direction($value) {
	$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == "number" and index("deg" "grad" "turn" "rad", unit($value));

	@return $is-direction or $is-angle;
}

@function legacy-direction($value) {
	@if is-direction($value) == false {
		@warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
	}
	$conversion-map: (to top: bottom, to top right: bottom left, to right top: left bottom, to right: left, to bottom right: top left, to right bottom: left top, to bottom: top, to bottom left: top right, to left bottom: right top, to left: right, to left top: right bottom, to top left: bottom right);

	@if map-has-key($conversion-map, $value) {
		@return map-get($conversion-map, $value);
	}

	@return 90deg - convert-angle($value, "deg");
}

@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: $direction, $color-stops;
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
}

// Examples
//.example-1
//  @include linear-gradient(#31B7D7, #EDAC7D)
//
//.example-2
//  @include linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%)
//
//.example-3
//  @include linear-gradient(42deg, #B58234 0%, #D2B545 50%, #D7C04D 50.01%, #FFFFFF 100%)

@function pow($number, $exponent) {
	$value: 1;

	@if $exponent > 0 {
		@for $i from 1 through $exponent {
			$value: $value * $number;
		}
	}

	@return $value;
}

@function round-float($number, $n) {
	$float: pow(10, $n);
	$value: round($number * $float) / $float;

	@return $value;
}

// Set ratio
@mixin ratio($x: 1, $y: 1) {
	$padding: round-float($y / $x * 100%, 2);

	padding-top: $padding;
}

// Normalize text rendering
@mixin antialiased {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	user-select: none;
}

// Hide text for screen reader
@mixin hide-text {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

// Scroll lock
@mixin scroll-blocked {
	width: 100% !important;
	height: 100% !important;
	max-width: 100% !important;
	max-height: 100% !important;
	margin: 0 !important;
	padding: 0 !important;
	overflow: hidden !important;
}
